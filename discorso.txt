# Introduzione

No potendo portare slides ho scritto le cose che volevo dirvi dentro un file 
di testo che ho chiamato "slides.txt":

    $ ls slides.txt
    slides.txt

Quindi ho portato un file di testo. Dentro ci sono 17 linee:

    $ wc -l slides.txt
    17 slides.txt

E ne approfitto per farvi vedere una funzionalità della bash 4: il comando mapfile.

# Il comando mapfile

Il comando mapfile fa parte di Bash 4, se usate Linux avete la Bash
4, se usate Mac non c'è e dovete installarla con brew.

Praticamente serve per caricare un file dentro un array. Si usa così:

    $ mapfile slides <slides.txt

Ora dentro l'array slides ci sono le righe prese dal file. Una linea per ogni
elemento dell'array.

    $ declare -p slides
    declare -a slides=([0]=$'KATA in BASH\n' [1]=$'Risolvo un esercizio di programmazione\n' [2]=$'in Bash\n' [3]=$'usando TDD\n' [4]=$'senza usare framework esistenti\n' [5]=$'costruendo il framework di testing da zero\n' [6]=$'L\'esercizio è lo String Calculator (http://osherove.com/tdd-kata-1/)\n' [7]=$'Creare un semplice "String Calculator" \n' [8]=$'con un metodo int Add(string numbers).\n' [9]=$'La stringa contiene numeri separati da virgola,\n' [10]=$'il metodo deve restuire la somma dei numeri\n' [11]=$'(se la stringa vuota si considera la somma zero).\n' [12]=$'Esempio: "" restituisce 0        \n' [13]=$'Esempio: "1" restituisce 1\n' [14]=$'Esempio: "1,2" restituisce 3\n' [15]=$'Esempio: "1,2,4" restituisce 7\n' [16]=$'Fine\n')

Posso vedere quando è grande l'array così:

    $ echo "${#slides[*]}"

Oppure posso vedere una singola slide così:

    $ echo "${slides[0]}"

Posso fare anche un ciclo:

    $ for slide in "${slides[@]}"; do echo "$slide"; done

Se ingrandisco i font, abbiamo a disposizione tutto quello che serve per creare un sistema per mostrare delle slides:

    $ for slide in "${slides[@]}"; do echo "$slide" | fmt -w 32; read; done

# Ciclo senza mapfile

Se non si vuole o non si può usare map file lo stesso ciclo si può fare usando
read.

    $ while read -r line <& 3; do clear; echo "$line"; read; done 3<slides.txt

L'unica accortezza è che bisogna usare un file descriptor di appoggio per fare
in modo che i due read (quello che legge slides.txt e quello che aspetta che l'utente prema invio) non cerchino di leggere dallo stesso file.

# Reset prima di iniziare

Reset prima di iniziare: 

    $ git rm -r bin script && git commit -m "Reset"

# Cosa vogliamo ottenere

Cosa vogliamo ottenere? Un programma da chiamre in questo modo:

    $ bin/add

Che quando viene chiamato restituisce un numero che rappresenta la somma
dello string calculator. Per esempio se lo chiamo con una sfilza di numeri
separati da virgola:

    $ bin/add "1,2,3"

mi deve dare la somma, in questo caso "6". Adesso non da niente, perché il
programma non c'è ancora:


    $ bin/add "1,2,3"

Riassumendo, se lo chiamo così cosa deve restituire?

    $ bin/add "1,2"

E se lo chiamo così?

    $ bin/add "4"

E se lo chiamo così?

    $ bin/add ""

# Partiamo dai test

Per riuscire a creare questo comando usiamo il Test-Driven Development e
quindi partiamo dal test.

Io vorrei avere una suite di test da chiamare così:

    $ script/test-all

Vorrei che quando la chiamo così mi segnali se tutti i test passano, oppure
se almeno uno fallisce.

Se provo a chiamarlo ora cosa mi da?

    $ script/test-all
    bash: script/test-all: No such file or directory

Bene questo è il primo test rosso da far passare. La regola del TDD è che
quando sei in barra rossa devi progredire, se sei capace passando alla
barra verde, oppure, se non riesci ad arrivare subito al verde, puoi anche
passare da barra rossa a barra rossa a patto che il messaggio di errore
cambi segnando un progresso. Io dico che "si cambia gradazione di rosso".

In questo caso non si può passare da rosso a verde, però si può cambiare la
gradazione di rosso.

    $ mkdir script
    $ touch script/test-all
    $ script/test-all
    bash: script/test-all: Permission denied

Adesso il file esiste, solo che non è eseguibile, ci vuole poco per
risolvere, basta un `chmod`:

    $ chmod +x script/test-all
    $ script/test-all

Questa è la prima barra verde, in UNIX si usa che quando il programma ha
successo esce con exit code uguale a 0:

    $ echo "$?"
    0

Con la notazione "$?" si stampa l'exit code che è 0, in genere, i comandi
UNIX sono silenziosi se le cose vanno bene o se non ci sono informazioni
importanti da dare. Per il nostro micro sistema di testing possiamo fare
che se non scrive niente e l'exit code è 0 vuol dire che tutti i test sono
passati. Quindi, adesso che non ci sono ancora test ma il comando si può
lanciare possiamo dire di essere in barra verde.

Ora lo apriamo e cominciamo a modificarlo.

    $ vim script/test-all

Prima di scrivere qualche test vorrei rendere possibile lanciare i test 
direttamente da Vim.

Con Vim è facile lanciare i comandi della shell:

    :!script/test-all

Quando lanciamo lo script mostra il terminale con l'eventuale output dello
script, e eventualmente segnala l'exit code (se diverso da 0).

Se i test passano ci fa vedere qualcosa del tipo:

    Press ENTER or type command to continue

Se invece i test non passano ci fa vedere che l'exit code non è 0:
    
    shell returned 1

    Press ENTER or type command to continue
    
Per simulare che un test fallisce usiamo il comando `false`, il comando
false è un built-in particolare della Bash, che non fa niente ma lo fa
fallendo, cioè con un exit code diverso da 0.

    false

Per ritornare ad uno stato in cui si passa possiamo usare il comando duale:
true. Il comando true ha sempre successo, cioè termina sempre con exit code
uguale a 0.

Non è bella da vedere come barra verde, la voglio migliorare un po'. Come
prima cosa aggiungo il comando clear alla shell, di modo che mi pulisca lo
schermo.

    :!clear; script/test-all
    
Poi voglio automatizzare il fatto di lanciare i test. Definisco uno
shortcut.

    :nnoremap ,, :wa \| !clear; script/test-all<CR>

Nella definizione dello shortcut ho aggiunto anche il salvataggio
automatico dei file aperti prima di eseguire i test.

Quindi ora appena faccio

    ,,

Mi lancia i test. Ora dovrebbe essere più semplice riconoscere la barra
rossa da quella verde.

Ora cominciamo con il primo test:

    #!/bin/bash

    add "2" > actual.txt
    echo "2" > expected.txt

    diff expected.txt actual.txt 

Il primo errore che viene segnalato è che manca la definzione di "add".
Aggiungiamo la funzione:

    add() {
        :
    }

Non si possono creare funzioni vuote in Bash, la definizione della funzione
deve contenere almeno un comando. Il due punti ":" che ho scritto nel corpo
della funzione è l'invocazione del comando che non fa nulla. ":" è uno dei
comandi built-in nella Bash, posso vedere cosa fa direttamente dall'help
della bash:

    bash-4.4$ help :
    :: :
        Null command.

        No effect; the command does nothing.

        Exit Status:
        Always succeeds.

Se rilancio i test ottengo che il problema è che output atteso è diverso da
quello ottenuto. Per andare al verde più velocemente possibile (come è
richiesto da TDD) uso il "Fake It" e cioè vado a cablare in add() l'output
atteso:

    add() {
        echo "2"
    }

# Primo Refactoring

Quali sono i refactoring che si possono fare?

Estrazione di assert-equal:

    assert-equal() {
        local exptected_output="$1"; shift
        local actual_output="$1"
        diff <(echo "$exptected_output") <(echo "$actual_output")
    }

    assert-equal "2" "$(add "2")"

Verifica che assert-equal funziona con altri parametri:

    assert-equal "2" "$(add "2")"
    assert-equal "3" "3"

# Grazie alla fine

echo "$(tput setaf 2; figlet thank you; tput sgr0)"

# Barra rossa o verde

    print-red-or-green-bar() {
        exit_code="$?"
        if [[ "$exit_code" != 0 ]]
        then
            echo "$(tput setaf 1)FAIL$(tput sgr0)"
        else
            echo "$(tput setaf 2)PASS$(tput sgr0)"
        fi
    
        return "$exit_code"
    }

# Altri test

    assert-equal "3" "$(add "1,2")"

E implementazione (già rifattorizzata):

    add() {
        IFS=, read -ra numbers <<< "$1"
        echo "$((numbers[0]+numbers[1]))"
    }
    



# green bar on exit 
trap print_red_or_green_bar EXIT
print_red_or_green_bar() {
    if [[ "$?" == 0 ]]
    then
        echo "$(tput setaf 2)PASS$(tput sgr0)"
    else
        echo "$(tput setaf 1)FAIL$(tput sgr0)"
    fi
}

# la sberla
script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# print stack trace in bash
print_stack_trace() {
    echo "Stack trace:"
    for (( i=1; i<${#FUNCNAME[@]}; i++)); do
        echo " ${FUNCNAME[$i]}(${BASH_SOURCE[$i]}:${BASH_LINENO[$i-1]})"
    done
} 

# run main function only when the script it's executed,
# not when it is scripted

    [[ "${BASH_SOURCE[0]}" == "$0" ]] && main "$@"

# green and red

echo "$(tput setaf 2)green$(tput sgr0)"
echo "$(tput setaf 1)red  $(tput sgr0)"

# Echo to stderr

>&2 echo "Failed at line: ${BASH_LINENO[0]}"

# Splitting di una stringa:

IFS=, read -ra array_with_values <<< "$string_of_comma_separated_values" 

# Print me
cat discorso.txt  | iconv -c -f utf-8 -t ISO-8859-1 | a2ps -o- -2m -  --medium=Letter > output.ps ; open output.ps
-eof
