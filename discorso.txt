# Introduzione

In realtà ho preparato una cosa che si chiama "slides". È un file di testo dove
c'è scritto cosa faremo, si chiama slides.txt.

    $ ls slides.txt
    $ wc -l slides.txt
    27 slides.txt
    
Contiene 27 slides, però non posso farvele vedere con Powerpoint o con Keynote,
sarebbe contro le regole. Quindi quello che farò e farvi vedere si può costruire
in bash un piccolo sistema per vedere le slide.

Uso mapfile che è un feature nuova di Bash 4, se usate Linux avete la Bash 4, se
usate Mac non c'è e dovete installarla con brew.

    $ mapfile slides <slides.txt

In questo modo abbiamo caricato il contenuto del file slides.txt dentro un array
nella Bash. La Bash ha anche gli array. Per esempio possiamo vedere la prima
slide:

    $ echo ${slides[0]}

Adesso è un attimo creare un sistema che fa vedere le slide ecco:

    $ for slide in "${slides[@]}"; do dialog --msgbox "$slide" 0 0; done

# Demo


todo list

 - usare una todo list dall'inizio
 - assert-equal
 - messaggio FAIL PASS
 - messaggio FAIL/PASS colorato
 - 

# green bar on exit 
trap print_red_or_green_bar EXIT
print_red_or_green_bar() {
    if [[ "$?" == 0 ]]
    then
        echo "$(tput setaf 2)PASS$(tput sgr0)"
    else
        echo "$(tput setaf 1)FAIL$(tput sgr0)"
    fi
}

# la sberla
script_dir="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# print stack trace in bash
print_stack_trace() {
    echo "Stack trace:"
    for (( i=1; i<${#FUNCNAME[@]}; i++)); do
        echo " ${FUNCNAME[$i]}(${BASH_SOURCE[$i]}:${BASH_LINENO[$i-1]})"
    done
} 

# run main function only when the script it's executed, not when it is scripted

    [[ "${BASH_SOURCE[0]}" == "$0" ]] && main "$@"

# green and red

echo "$(tput setaf 2)green$(tput sgr0)"
echo "$(tput setaf 1)red  $(tput sgr0)"

# greenbar
greenbar_on_command() {
    command="$1"
    "$command"
    exit_code="$?"
    if [[ "$exit_code" == 0 ]]
    then
        echo "$(tput setaf 2)"'PASSED'"$(tput sgr0)"
    else
        echo "$(tput setaf 1)"'FAILED'"$(tput sgr0)"
    fi
}

# Echo to stderr

>&2 echo "Failed at line: ${BASH_LINENO[0]}"

# Splitting di una stringa:

IFS=, read -ra array_with_values <<< "$string_of_comma_separated_values" 

# Scrivere una stringa centrata

display_center(){
    line="$1"
    columns="$(tput cols)"
    printf "%*s\n" $(( (${#line} + columns) / 2)) "$line"
}

-eof
