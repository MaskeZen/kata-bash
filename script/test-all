#!/bin/bash

record_was_run_on_var() {
    local var="$1"
    read -r "$var" <<< 1
}

run_test() {
    "$@"
}

assert_equal() {
    local expected="$1"
    local actual="$2"
    if [[ "$expected" != "$actual" ]]
    then
        >&2 echo "Failed in ${FUNCNAME[1]} at ${BASH_SOURCE[0]}:${BASH_LINENO[0]}"
        >&2 echo "Expected: $expected"
        >&2 echo "Actual  : $actual"
    fi
}

test_a_function_that_set_environment() {
    record_was_run_on_var variable_to_record_to
    assert_equal $variable_to_record_to 1
}

test_false() {
    false 
    assert_equal '1' "$?"
}

test_calculator() {
    assert_equal 0 "$(add '')"
}

test_a_calculator_should_add_a_number_to_its_value() {
    assert_equal 4 "$(add '4')"
    assert_equal 5 "$(add '5')"
}

test_a_calculator_should_add_two_comma_separated_values_to_its_sum() {
    assert_equal 9 "$(add '4,5')"
    assert_equal 15 "$(add '7,8')"
}

test_a_calculator_can_add_up_to_three_numbers() {
    assert_equal 6 "$(add '1,2,3')"
}

add() {
    IFS=, read -ra numbers <<< "$1"
    local sum=0
    for number in "${numbers[@]}"
    do
        ((sum+=number))
    done
    echo "$sum"
}

run_test test_a_function_that_set_environment
run_test test_false
run_test test_calculator
run_test test_a_calculator_should_add_a_number_to_its_value
run_test test_a_calculator_should_add_two_comma_separated_values_to_its_sum
run_test test_a_calculator_can_add_up_to_three_numbers




